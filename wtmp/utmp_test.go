package wtmp

import (
	"testing"
	"bytes"
)

func TestMashalInputNilByte (t *testing.T) {
	utmp := Utmp{}

	if err := Unmashal(nil, &utmp); err == nil {
		t.Error("Expected return erorr, got nil")
	}
}

func TestMashalInputNilUtmp (t *testing.T) {
	b := make([]byte, 10)

	if err := Unmashal(b, nil); err == nil {
		t.Error("Expected return error, got nil")
	}
}

func TestUnmashal(t *testing.T) {
	testcases := [] struct {
		b []byte
		s Utmp
	}{
		//{s:Utmp{UtType:1, UtPid:2, UtLine:[]byte{}, UtId:[]byte{0x00}, UtUser:[]byte{0x00}, UtHost:[]byte{0x00}, UtExit:ExitStatus{0, 0}, UtTv:UtTv{0,0}, UtSession:0, UtAddrV6:[]byte{0x00}, Unused:[]byte{0x00}}, b:[]byte{0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00}},
		{s:Utmp{UtType:7, UtPid:3673, UtLine:[]byte{}, UtId:[]byte{0x00,0x00,0x00,0x00}, UtUser:[]byte{0x00}, UtHost:[]byte{0x00}, UtExit:ExitStatus{0, 0}, UtTv:UtTv{0,0}, UtSession:0, UtAddrV6:[]byte{0x00}, Unused:[]byte{0x00}}, b:[]byte{0x07, 0x00, 0x00, 0x00, 0x59, 0x0E, 0x00, 0x00, 0x70, 0x74, 0x73, 0x2F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x73, 0x2F, 0x38, 0x72, 0x6F, 0x6F, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x39, 0x32, 0x2E, 0x31, 0x36, 0x38, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x38, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xBF, 0x9D, 0x56, 0xA9, 0xBC, 0x05, 0x00, 0xC0, 0xA8, 0x0A, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		//{s:Utmp{UtType:7, UtPid:3712, UtLine:[]byte{}, UtId:[]byte{}, UtUser:[]byte{}, UtHost:[]byte{}, UtExit:ExitStatus{}, UtTv:UtTv{}, UtSession:0, UtAddrV6:[]byte{}, Unused:[]byte{}}, b:[]byte{0x07, 0x00, 0x00, 0x00, 0x80, 0x0E, 0x00, 0x00, 0x70, 0x74, 0x73, 0x2F, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x73, 0x2F, 0x39, 0x72, 0x6F, 0x6F, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x39, 0x32, 0x2E, 0x31, 0x36, 0x38, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x38, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0xBF, 0x9D, 0x56, 0xAD, 0xAA, 0x04, 0x00, 0xC0, 0xA8, 0x0A, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		//{s:Utmp{UtType:8, UtPid:13999, UtLine:[]byte{}, UtId:[]byte{}, UtUser:[]byte{}, UtHost:[]byte{}, UtExit:ExitStatus{}, UtTv:UtTv{}, UtSession:0, UtAddrV6:[]byte{}, Unused:[]byte{}}, b:[]byte{0x08, 0x00, 0x00, 0x00, 0xAF, 0x36, 0x00, 0x00, 0x70, 0x74, 0x73, 0x2F, 0x31, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0xF0, 0x9D, 0x56, 0x8C, 0x71, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	}

	utmp := Utmp{}

	for i, u := range testcases {
		if err := Unmashal(u.b, &utmp); err != nil {
			t.Error("error: ", err)
		} else {
			if utmp.UtType != u.s.UtType {
				t.Error("Expected", i," utmp.UtType:", u.s.UtType, " got: ", utmp.UtType)
			} else if utmp.UtPid != u.s.UtPid {
				t.Error("Expected", i," utmp.UtPid:", u.s.UtPid, " got: ", utmp.UtPid)
			} else if bytes.Compare(utmp.UtLine, u.s.UtLine) != 0 {
				t.Error("Expected", i," utmp.UtLine:", u.s.UtLine, " got: ", utmp.UtLine)
			} else if bytes.Compare(utmp.UtId, u.s.UtId) != 0 {
				t.Error("Expected", i," utmp.UtId:", u.s.UtId, " got: ", utmp.UtId)
			} else if bytes.Compare(utmp.UtUser, u.s.UtUser) != 0 {
				t.Error("Expected", i," utmp.UtUser:", u.s.UtUser, " got: ", utmp.UtUser)
			} else if bytes.Compare(utmp.UtHost, u.s.UtHost) != 0 {
				t.Error("Expected", i," utmp.UtHost:", u.s.UtHost, " got: ", utmp.UtHost)
			} else if utmp.UtExit != u.s.UtExit {
				t.Error("Expected", i," utmp.UtExit:", u.s.UtExit, " got: ", utmp.UtExit)
			} else if utmp.UtTv != u.s.UtTv {
				t.Error("Expected", i," utmp.UtTv:", u.s.UtTv, " got: ", utmp.UtTv)
			} else if utmp.UtSession != u.s.UtSession {
				t.Error("Expected", i," utmp.UtSession:", u.s.UtSession, " got: ", utmp.UtSession)
			} else if bytes.Compare(utmp.UtAddrV6, u.s.UtAddrV6) != 0  {
				t.Error("Expected", i," utmp.UtAddrV6 :", u.s.UtAddrV6 , " got: ", utmp.UtAddrV6 )
			} else if bytes.Compare(utmp.Unused, u.s.Unused ) != 0 {
				t.Error("Expected", i," utmp.Unused :", u.s.Unused , " got: ", utmp.Unused )
			}
		}
	}
}

func TestString(t *testing.T) {
	testcases := [] struct {
		utmp Utmp
		msg string
	}{
		{utmp:Utmp{UtType:1, UtPid:2, UtLine:[]byte{0x00}, UtId:[]byte{0x00,0x00,0x00,0x00}, UtUser:[]byte{0x00}, UtHost:[]byte{0x00}, UtExit:ExitStatus{0,0}, UtTv:UtTv{0,0}, UtSession:0, UtAddrV6:[]byte{0x00}, Unused:[]byte{0x00}}, msg:"ut_type:1, ut_pid:2"},
		{utmp:Utmp{UtType:7, UtPid:3673, UtLine:[]byte{0x00}, UtId:[]byte{0x00,0x00,0x00,0x00}, UtUser:[]byte{0x00}, UtHost:[]byte{0x00}, UtExit:ExitStatus{0,0}, UtTv:UtTv{0,0}, UtSession:0, UtAddrV6:[]byte{0x00}, Unused:[]byte{0x00}}, msg:"ut_type:7, ut_pid:"},
		{utmp:Utmp{UtType:7, UtPid:3712, UtLine:[]byte{0x00}, UtId:[]byte{0x00,0x00,0x00,0x00}, UtUser:[]byte{0x00}, UtHost:[]byte{0x00}, UtExit:ExitStatus{0,0}, UtTv:UtTv{0,0}, UtSession:0, UtAddrV6:[]byte{0x00}, Unused:[]byte{0x00}}, msg:"ut_type:7, ut_pid:"},
		{utmp:Utmp{UtType:8, UtPid:13999, UtLine:[]byte{0x00}, UtId:[]byte{0x00,0x00,0x00,0x00}, UtUser:[]byte{0x00}, UtHost:[]byte{0x00}, UtExit:ExitStatus{0,0}, UtTv:UtTv{0,0}, UtSession:0, UtAddrV6:[]byte{0x00}, Unused:[]byte{0x00}}, msg:"ut_type:7, ut_pid:"},
	}

	for i, tc := range testcases {
		if tc.utmp.String() != tc.msg {
			t.Error("Expected message", i, ": ", tc.msg	, " got: ", tc.utmp.String())
		}
	}
}
